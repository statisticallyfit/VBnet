'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by SpecFlow (http://www.specflow.org/).
'     SpecFlow Version:1.9.0.77
'     SpecFlow Generator Version:1.9.0.0
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
#Region "Designer generated code"
'#pragma warning disable
Imports TechTalk.SpecFlow

Namespace BankAccountUnitTestProject.Features.Add
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77"),  _
     System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     NUnit.Framework.TestFixtureAttribute(),  _
     NUnit.Framework.DescriptionAttribute("AccountMgmt")>  _
    Partial Public Class AccountMgmtFeature
        
        Private Shared testRunner As TechTalk.SpecFlow.ITestRunner
        
#ExternalSource("AccountMgmt.feature",1)
#End ExternalSource
        
        <NUnit.Framework.TestFixtureSetUpAttribute()>  _
        Public Overridable Sub FeatureSetup()
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner
            Dim featureInfo As TechTalk.SpecFlow.FeatureInfo = New TechTalk.SpecFlow.FeatureInfo(New System.Globalization.CultureInfo("en-US"), "AccountMgmt", "Allow users to deposit, withdraw, or request balance from a list of given choices"& _ 
                    ""&Global.Microsoft.VisualBasic.ChrW(10)&"Return a running balance upon user request"&Global.Microsoft.VisualBasic.ChrW(10)&"Do not allow overdrafts", ProgrammingLanguage.VB, CType(Nothing,String()))
            testRunner.OnFeatureStart(featureInfo)
        End Sub
        
        <NUnit.Framework.TestFixtureTearDownAttribute()>  _
        Public Overridable Sub FeatureTearDown()
            testRunner.OnFeatureEnd
            testRunner = Nothing
        End Sub
        
        <NUnit.Framework.SetUpAttribute()>  _
        Public Overridable Sub TestInitialize()
        End Sub
        
        <NUnit.Framework.TearDownAttribute()>  _
        Public Overridable Sub ScenarioTearDown()
            testRunner.OnScenarioEnd
        End Sub
        
        Public Overridable Sub ScenarioSetup(ByVal scenarioInfo As TechTalk.SpecFlow.ScenarioInfo)
            testRunner.OnScenarioStart(scenarioInfo)
        End Sub
        
        Public Overridable Sub ScenarioCleanup()
            testRunner.CollectScenarioErrors
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("Deposit"),  _
         NUnit.Framework.CategoryAttribute("mytag")>  _
        Public Overridable Sub Deposit()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Deposit", New String() {"mytag"})
#ExternalSource("AccountMgmt.feature",7)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
#ExternalSource("AccountMgmt.feature",8)
 testRunner.Given("choices are shown", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",9)
 testRunner.And("the balance is 0", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",10)
 testRunner.When("user has entered 200 to deposit", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",11)
 testRunner.Then("add them so balance is 200", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("Withdraw")>  _
        Public Overridable Sub Withdraw()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Withdraw", CType(Nothing,String()))
#ExternalSource("AccountMgmt.feature",13)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
#ExternalSource("AccountMgmt.feature",14)
 testRunner.Given("choices are shown", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",15)
 testRunner.And("the balance is 200", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",16)
 testRunner.When("user has entered 100 to withdraw", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",17)
 testRunner.Then("subtract amount from balance so balance is 100", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("Show balance upon user request")>  _
        Public Overridable Sub ShowBalanceUponUserRequest()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Show balance upon user request", CType(Nothing,String()))
#ExternalSource("AccountMgmt.feature",19)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
#ExternalSource("AccountMgmt.feature",20)
 testRunner.Given("choices are shown", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",21)
 testRunner.And("user requests the balance", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",22)
 testRunner.Then("show balance is 100", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("Forbid overdrafts")>  _
        Public Overridable Sub ForbidOverdrafts()
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Forbid overdrafts", CType(Nothing,String()))
#ExternalSource("AccountMgmt.feature",24)
Me.ScenarioSetup(scenarioInfo)
#End ExternalSource
#ExternalSource("AccountMgmt.feature",25)
 testRunner.Given("choices are shown and balance is 100", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",26)
 testRunner.And("user requests to withdraw 500", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",27)
 testRunner.Then("do not withdraw 500", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("AccountMgmt.feature",28)
 testRunner.And("tell user the amount is not withdrawn", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
    End Class
End Namespace
'#pragma warning restore
#End Region
